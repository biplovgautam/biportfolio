document.addEventListener('DOMContentLoaded', () => {
  // Enhanced text animation for typing effect with smoother transitions
  const text = document.querySelector(".dynamic-text");
  if (text) {
      const phrases = ["Developer.", "Designer.", "Student.", "AI Enthusiast."];
      let currentPhrase = 0;
      let currentChar = 0;
      let isDeleting = false;
      let typingSpeed = 100;
      
      function typeEffect() {
          const currentText = phrases[currentPhrase];
          
          if (isDeleting) {
              text.textContent = currentText.substring(0, currentChar - 1);
              currentChar--;
              typingSpeed = 30 + Math.random() * 40; // Variable delete speed for natural feel
          } else {
              text.textContent = currentText.substring(0, currentChar + 1);
              currentChar++;
              typingSpeed = 70 + Math.random() * 50; // Variable typing speed for natural feel
          }
          
          // If word is complete, pause and then delete
          if (!isDeleting && currentChar === currentText.length) {
              isDeleting = true;
              typingSpeed = 1500; // Pause before deleting
              
              // Add a subtle scale effect when complete
              text.style.transform = 'scale(1.03)';
              setTimeout(() => {
                  text.style.transform = 'scale(1)';
              }, 200);
          }
          
          // If deletion is complete, move to next word
          if (isDeleting && currentChar === 0) {
              isDeleting = false;
              currentPhrase = (currentPhrase + 1) % phrases.length;
              
              // Add a subtle fade effect between words
              text.style.opacity = '0.5';
              setTimeout(() => {
                  text.style.opacity = '1';
              }, 200);
          }
          
          setTimeout(typeEffect, typingSpeed);
      }
      
      // Start the typing effect
      setTimeout(typeEffect, 1000); // Small delay for initial appearance
  }
  
  // Enhanced sidebar behavior
  const sidebarNav = document.querySelector('.sidebar');
  if (sidebarNav) {
      // Adjust sidebar opacity based on scroll position
      window.addEventListener('scroll', () => {
          const scrollPosition = window.scrollY;
          if (scrollPosition > 300) {
              sidebarNav.style.backgroundColor = `rgba(var(--sidebar-bg-rgb), 0.8)`;
          } else {
              sidebarNav.style.backgroundColor = `rgba(var(--sidebar-bg-rgb), 0.85)`;
          }
      });
      
      // Add hover effect to sidebar
      sidebarNav.addEventListener('mouseenter', () => {
          sidebarNav.style.backgroundColor = `rgba(var(--sidebar-bg-rgb), 1)`;
          sidebarNav.style.boxShadow = '0 5px 25px var(--shadow-color)';
      });
      
      sidebarNav.addEventListener('mouseleave', () => {
          sidebarNav.style.backgroundColor = `rgba(var(--sidebar-bg-rgb), 0.85)`;
          sidebarNav.style.boxShadow = '0 5px 20px var(--shadow-color)';
      });
  }
});
